<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
       <context:annotation-config/>
       <aop:aspectj-autoproxy/>
       <context:component-scan base-package="cn.sinobest.*" />
       <context:property-placeholder location="classpath*:*.properties"/>
       <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
              <property name="locations">
                     <list>
                            <value>classpath*:*.properties</value>
                     </list>
              </property>
       </bean>
       <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
              <property name="properties" ref="configProperties" />
       </bean>

       <bean id="initDataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
              <property name="username" value="${oracle.jdbc.username}"/>
              <property name="password" value="${oracle.jdbc.password}"/>
              <property name="driverClass" value="${oracle.jdbc.driver}"/>
              <property name="url" value="${oracle.jdbc.url}"/>
       </bean>

       <bean id="myOracleLogger" class="cn.sinobest.druid.MyDruidOracleLogger" init-method="init">
              <constructor-arg name="druidLoggerDatasource" ref="initDataSource"/>
       </bean>

       <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">

              <property name="driverClassName" value="${oracle.jdbc.driver}"/>
              <property name="url" value="${oracle.jdbc.url}"/>
              <property name="username" value="${oracle.jdbc.username}"/>
              <property name="password" value="${oracle.jdbc.password}"/>

              <property name="timeBetweenLogStatsMillis" value="${oracle.jdbc.timeBetweenLogStatsMillis}"/>

              <!-- 配置初始化大小、最小、最大 -->
              <property name="initialSize" value="${oracle.jdbc.initialSize}"/>
              <property name="minIdle" value="${oracle.jdbc.minIdle}"/>
              <property name="maxActive" value="${oracle.jdbc.maxActive}"/>

              <!-- 配置获取连接等待超时的时间 -->
              <property name="maxWait" value="${oracle.jdbc.maxWait}"/>
              <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
              <property name="timeBetweenEvictionRunsMillis" value="${oracle.jdbc.timeBetweenEvictionRunsMillis}" />

              <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
              <property name="minEvictableIdleTimeMillis" value="${oracle.jdbc.minEvictableIdleTimeMillis}" />

              <!-- 查询超时时候 -->
              <property name="queryTimeout" value="${oracle.jdbc.querytimeout}"/>

              <property name="validationQuery" value="${oracle.jdbc.validationQuery}" />
              <property name="connectionInitSqls" value="${oracle.jdbc.connectionInitSqls}"/>
              <property name="testWhileIdle" value="${oracle.jdbc.testWhileIdle}" />
              <property name="testOnBorrow" value="${oracle.jdbc.testOnBorrow}" />
              <property name="testOnReturn" value="${oracle.jdbc.testOnReturn}" />

              <!-- 打开PSCache，并且指定每个连接上PSCache的大小
              如果用Oracle，则把poolPreparedStatements配置为true，gbase可以配置为false。-->
              <property name="poolPreparedStatements" value="${oracle.jdbc.poolPreparedStatements}" />
              <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="${oracle.jdbc.maxPoolPreparedStatementPerConnectionSize}" />-->

              <!--日志-->
              <!--<property name="statLogger" ref="myOracleLogger" />-->

              <property name="proxyFilters">
                     <list>
                            <ref bean="synSqlFilter"/>
                     </list>
              </property>

              <!-- 配置监控统计拦截的filters -->
              <property name="filters" value="${oracle.jdbc.filters}" />

       </bean>

       <!-- 大对象处理器  -->
       <bean id="appDefLobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler"/>

       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <property name="dataSource" ref="dataSource"/>
       </bean>

       <!--事务管理器配置-->
       <tx:advice id="txAdvice" transaction-manager="transactionManager">
              <tx:attributes>
                     <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
                     <!--<tx:method name="get*" propagation="REQUIRED" read-only="true"/>-->
                     <!--<tx:method name="count*" propagation="REQUIRED" read-only="true"/>-->
                     <!--<tx:method name="find*" propagation="REQUIRED" read-only="true"/>-->
                     <!--<tx:method name="list*" propagation="REQUIRED" read-only="true"/>-->
                     <tx:method name="*" propagation="REQUIRED"/>
              </tx:attributes>
       </tx:advice>

       <!--<aop:config expose-proxy="true" proxy-target-class="true">-->
       <!--<!- 只对业务逻辑层实施事务 -->
       <!--<aop:pointcut value="txPointcut"-->
       <!--expression="execution(* cn.sinobest.track.inner.GraphDataSearcher.*(..))"/>-->
       <!--<aop:advisor value="txAdvisor" advice-ref="txAdvice" pointcut-ref="txPointcut"/>-->
       <!--</aop:config>-->

       <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
              <property name="dataSource" ref="dataSource" />
       </bean>

       <!--<import resource="applicationContext-service.xml"/>-->
       <import resource="applicationContext-synonym.xml"/>
       <import resource="applicationContext-graph.xml"/>
</beans>